{"version":3,"file":"react-decision-tree-flow.cjs.production.min.js","sources":["../src/Shared.tsx","../src/Controls.tsx","../src/Step.tsx","../src/Wizard.tsx"],"sourcesContent":["import React from 'react';\r\n\r\nexport interface Tree {\r\n  readonly [step: string]: readonly string[];\r\n}\r\n\r\nexport type ControlType<T extends Tree> = Record<keyof T, () => void>;\r\n\r\nexport interface WizardContextProps<T extends Tree, D extends any = any> {\r\n  tree: T;\r\n  step: string;\r\n  setStep: React.Dispatch<React.SetStateAction<keyof T>>;\r\n  getControls: () => ControlType<T>;\r\n  data: D | null;\r\n  setData: React.Dispatch<React.SetStateAction<D>>;\r\n}\r\n\r\nexport const WizardContext = React.createContext<WizardContextProps<any>>({\r\n  tree: {},\r\n  step: '',\r\n  setStep: () => {},\r\n  getControls: () => ({}),\r\n  data: {},\r\n  setData: () => {},\r\n});\r\n","import React, { PropsWithChildren } from 'react';\r\nimport { Tree, WizardContext, WizardContextProps } from './Shared';\r\n\r\nexport interface ControlHook<T extends Tree, D extends any = any> {\r\n  step: keyof T;\r\n  tree: T;\r\n  destinations: Record<keyof T, (data?: D) => void>;\r\n  data?: D;\r\n}\r\n\r\n/**\r\n * A react hook that exposes the current step, possible destinations, passed data, and the tree\r\n * being used. Destinations is an object where the keys are possible destinations and the values are\r\n * functions to move the wizard there.\r\n */\r\nexport function useControls<T extends Tree, D extends any = any>(): ControlHook<\r\n  T,\r\n  D\r\n> {\r\n  const { getControls, step, tree, data } = React.useContext(\r\n    WizardContext as React.Context<WizardContextProps<T, D>>\r\n  );\r\n  return { step, tree, destinations: getControls(), data: data || undefined };\r\n}\r\n\r\nexport interface ControlProps<T extends Tree, D extends any = any> {\r\n  children: (steps: ControlHook<T, D>) => React.ReactNode;\r\n}\r\n\r\n/**\r\n * Controls React Component\r\n * @param ChildrenRenderProp Children is a function that exposes the current step, possible destinations,\r\n * passed data, and the tree being used. Destinations is an object where the keys are possible destinations\r\n * and the values are functions to move the wizard there.\r\n */\r\nexport function Controls<T extends Tree, D extends any = any>({\r\n  children,\r\n}: PropsWithChildren<ControlProps<T>>) {\r\n  const getControls = useControls<T, D>();\r\n  return <>{children({ ...getControls })}</>;\r\n}\r\n","import React, { PropsWithChildren } from 'react';\r\nimport { Tree } from './Shared';\r\nimport { useControls } from './Controls';\r\n\r\nexport interface StepProps<T> {\r\n  name: keyof T;\r\n}\r\n\r\n/**\r\n * A Step to be used in the Wizard component. Will only be rendered if the name is the active step\r\n * @param props name of the step and children.\r\n */\r\nexport function Step<T extends Tree>({\r\n  children,\r\n  name,\r\n}: PropsWithChildren<StepProps<T>>) {\r\n  const { step, tree } = useControls<T>();\r\n\r\n  // Check if name is bad value\r\n  React.useEffect(() => {\r\n    if (!Object.keys(tree).includes(name as string)) {\r\n      console.warn(\r\n        `Step component with name ${name} is not found in step tree!`\r\n      );\r\n    }\r\n  }, [name, tree]);\r\n\r\n  return <>{step === name && children}</>;\r\n}\r\n","import React, { PropsWithChildren, ReactElement } from 'react';\r\nimport { Tree, ControlType, WizardContext } from './Shared';\r\n\r\nexport interface WizardProps<T extends Tree, D extends any = any> {\r\n  tree: T;\r\n  first: keyof T;\r\n  initialData?: D | null;\r\n}\r\n\r\n/**\r\n * Declarative Wizard component for React.\r\n * @param props Takes in a tree, the first step of the wizard, and children.\r\n */\r\nexport function Wizard<T extends Tree, D = any>({\r\n  children,\r\n  tree,\r\n  first,\r\n  initialData = null,\r\n}: PropsWithChildren<WizardProps<T, D>>): ReactElement {\r\n  // Check tree for bad values\r\n  React.useEffect(() => {\r\n    const allSteps = Object.keys(tree);\r\n    if (!allSteps.includes(first as string)) {\r\n      console.warn(`First step ${first} is now found in tree as key`);\r\n    }\r\n  }, [first, tree]);\r\n  React.useEffect(() => {\r\n    const allSteps = Object.keys(tree);\r\n    Object.entries(tree).forEach(([key, dests]) => {\r\n      dests.forEach(d => {\r\n        if (!allSteps.includes(d)) {\r\n          console.warn(\r\n            `Tree definition includes path to ${d} from ${key}. However ${d} is not in tree as a key.`\r\n          );\r\n        }\r\n      });\r\n    });\r\n  }, [tree]);\r\n\r\n  const [step, setStep] = React.useState<keyof T>(first);\r\n  const [data, setData] = React.useState<D | null>(initialData);\r\n  const getControls = () => {\r\n    const possibleSteps = tree[step];\r\n    return possibleSteps.reduce<ControlType<T>>((accum, step) => {\r\n      const next = {\r\n        [step]: (data?: D) => {\r\n          setStep(step);\r\n          if (data) {\r\n            setData(data);\r\n          }\r\n        },\r\n      };\r\n      return {\r\n        ...accum,\r\n        ...next,\r\n      };\r\n    }, {} as ControlType<T>);\r\n  };\r\n  return (\r\n    <WizardContext.Provider\r\n      value={{\r\n        tree,\r\n        step: step as string,\r\n        setStep: setStep as React.Dispatch<React.SetStateAction<any>>,\r\n        getControls: getControls as () => Record<string, any>,\r\n        data,\r\n        setData,\r\n      }}\r\n    >\r\n      {children}\r\n    </WizardContext.Provider>\r\n  );\r\n}\r\n"],"names":["WizardContext","React","createContext","tree","step","setStep","getControls","data","setData","useControls","useContext","destinations","undefined","children","name","useEffect","Object","keys","includes","console","warn","first","initialData","allSteps","entries","forEach","key","d","useState","Provider","value","reduce","accum"],"mappings":"mWAiBaA,EAAgBC,EAAMC,cAAuC,CACxEC,KAAM,GACNC,KAAM,GACNC,QAAS,aACTC,YAAa,iBAAO,IACpBC,KAAM,GACNC,QAAS,eCRX,SAAgBC,UAI4BR,EAAMS,WAC9CV,GAD+BO,IAAAA,WAG1B,CAAEH,OAHYA,KAGND,OAHYA,KAGNQ,cAAcL,IAH3BA,eAG0CC,KAAMA,QAAQK,oCAchEC,IAAAA,SAEMP,EAAcG,WACbR,gCAAGY,OAAcP,mCC1BxBO,IAAAA,SACAC,IAAAA,OAEuBL,IAAfL,IAAAA,KAAMD,IAAAA,YAGdF,EAAMc,WAAU,WACTC,OAAOC,KAAKd,GAAMe,SAASJ,IAC9BK,QAAQC,iCACsBN,mCAG/B,CAACA,EAAMX,IAEHF,gCAAGG,IAASU,GAAQD,mCCb3BA,IAAAA,SACAV,IAAAA,KACAkB,IAAAA,UACAC,YAAAA,aAAc,OAGdrB,EAAMc,WAAU,WACGC,OAAOC,KAAKd,GACfe,SAASG,IACrBF,QAAQC,mBAAmBC,oCAE5B,CAACA,EAAOlB,IACXF,EAAMc,WAAU,eACRQ,EAAWP,OAAOC,KAAKd,GAC7Ba,OAAOQ,QAAQrB,GAAMsB,SAAQ,gBAAEC,YACvBD,SAAQ,SAAAE,GACPJ,EAASL,SAASS,IACrBR,QAAQC,yCAC8BO,WAAUD,eAAgBC,uCAKrE,CAACxB,UAEoBF,EAAM2B,SAAkBP,GAAzCjB,OAAMC,SACWJ,EAAM2B,SAAmBN,GAApCd,cAmBXP,gBAACD,EAAc6B,UACbC,MAAO,CACL3B,KAAAA,EACAC,KAAMA,EACNC,QAASA,EACTC,YAvBc,kBACIH,EAAKC,GACN2B,QAAuB,SAACC,EAAO5B,qBAU7C4B,aARF5B,GAAO,SAACG,GACPF,EAAQD,GACJG,GACFC,EAAQD,UAQb,KASCA,UACAC,QAAAA,IAGDK"}