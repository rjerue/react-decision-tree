{"version":3,"file":"react-decision-tree-flow.cjs.production.min.js","sources":["../src/Shared.tsx","../src/Wizard.tsx","../src/Controls.tsx","../src/Step.tsx"],"sourcesContent":["import React from 'react';\n\nexport interface Tree {\n  readonly [step: string]: readonly string[];\n}\n\nexport type ControlType<T extends Tree> = Record<keyof T, () => void>;\n\nexport interface WizardContextProps<T extends Tree, D extends any = any> {\n  tree: T;\n  step: string;\n  getControls: () => ControlType<T>;\n  data: D | null;\n  back: (data?: D) => void;\n}\n\nexport const WizardContext = React.createContext<WizardContextProps<any>>({\n  tree: {},\n  step: '',\n  getControls: () => ({}),\n  data: {},\n  back: () => {},\n});\n","import React from 'react';\nimport { Tree, ControlType, WizardContext } from './Shared';\n\nexport interface WizardProps<T extends Tree, D extends any = any> {\n  tree: T;\n  first: keyof T;\n  initialData?: D | null;\n}\n\ninterface WizardState<T extends Tree, D extends any = any> {\n  step: keyof T;\n  data?: D;\n}\n\ninterface ReducerState<T extends Tree, D extends any = any> {\n  active: WizardState<T, D>;\n  history: WizardState<T, D>[];\n}\n\ntype ReducerAction<T extends Tree, D extends any = any> =\n  | { type: 'SET_STEP'; data?: D; step: keyof T }\n  | { type: 'STEP_BACK'; data?: D };\n\nfunction reducer<T extends Tree, D extends any = any>(\n  state: ReducerState<T, D>,\n  action: ReducerAction<T, D>\n): ReducerState<T, D> {\n  switch (action.type) {\n    case 'SET_STEP':\n      return {\n        ...state,\n        history: [state.active, ...state.history],\n        active: { step: action.step, data: action.data },\n      };\n    case 'STEP_BACK':\n      const [previous, ...history] = state.history;\n      return {\n        ...state,\n        active: {\n          step: previous.step,\n          data: action.data,\n        },\n        history,\n      };\n    default:\n      return state;\n  }\n}\n\n/**\n * Declarative Wizard component for React.\n * @param props Takes in a tree, the first step of the wizard, and children.\n */\nexport function Wizard<T extends Tree, D = any>({\n  children,\n  tree,\n  first,\n  initialData = null,\n}: React.PropsWithChildren<WizardProps<T, D>>): React.ReactElement {\n  const [\n    {\n      active: { step, data },\n    },\n    dispatch,\n  ] = React.useReducer<React.Reducer<ReducerState<T, D>, ReducerAction<T, D>>>(\n    reducer,\n    {\n      active: {\n        step: first,\n        data: initialData || undefined,\n      },\n      history: [],\n    }\n  );\n\n  React.useEffect(() => {\n    const allSteps = Object.keys(tree);\n    if (!allSteps.includes(first as string)) {\n      console.warn(`First step ${first} is now found in tree as key`);\n    }\n  }, [first, tree]);\n  React.useEffect(() => {\n    const allSteps = Object.keys(tree);\n    Object.entries(tree).forEach(([key, dests]) => {\n      dests.forEach(d => {\n        if (!allSteps.includes(d)) {\n          console.warn(\n            `Tree definition includes path to ${d} from ${key}. However ${d} is not in tree as a key.`\n          );\n        }\n      });\n    });\n  }, [tree]);\n\n  const getControls = () => {\n    const possibleSteps = tree[step];\n    return possibleSteps.reduce<ControlType<T>>((accum, step) => {\n      const next = {\n        [step]: (data?: D) => {\n          dispatch({ type: 'SET_STEP', step, data });\n        },\n      };\n      return {\n        ...accum,\n        ...next,\n      };\n    }, {} as ControlType<T>);\n  };\n\n  const back = (backData?: D) => {\n    dispatch({ type: 'STEP_BACK', data: backData || data });\n  };\n\n  return (\n    <WizardContext.Provider\n      value={{\n        tree,\n        step: step as string,\n        back,\n        getControls: getControls as () => Record<string, any>,\n        data,\n      }}\n    >\n      {children}\n    </WizardContext.Provider>\n  );\n}\n","import React, { PropsWithChildren } from 'react';\nimport { Tree, WizardContext, WizardContextProps } from './Shared';\n\nexport interface ControlHook<T extends Tree, D extends any = any> {\n  step: keyof T;\n  tree: T;\n  destinations: Record<keyof T, (data?: D) => void>;\n  back: (currentData?: D) => void;\n  data?: D;\n}\n\n/**\n * A react hook that exposes the current step, possible destinations, passed data, and the tree\n * being used. Destinations is an object where the keys are possible destinations and the values are\n * functions to move the wizard there.\n */\nexport function useControls<T extends Tree, D extends any = any>(): ControlHook<\n  T,\n  D\n> {\n  const { getControls, step, tree, data, back } = React.useContext(\n    WizardContext as React.Context<WizardContextProps<T, D>>\n  );\n  const backFunction = (newData?: D) => {\n    back(newData);\n  };\n  return {\n    step,\n    tree,\n    destinations: getControls(),\n    data: data || undefined,\n    back: backFunction,\n  };\n}\n\nexport interface ControlProps<T extends Tree, D extends any = any> {\n  children: (steps: ControlHook<T, D>) => React.ReactNode;\n}\n\n/**\n * Controls React Component\n * @param ChildrenRenderProp Children is a function that exposes the current step, possible destinations,\n * passed data, and the tree being used. Destinations is an object where the keys are possible destinations\n * and the values are functions to move the wizard there.\n */\nexport function Controls<T extends Tree, D extends any = any>({\n  children,\n}: PropsWithChildren<ControlProps<T>>) {\n  const getControls = useControls<T, D>();\n  return <>{children({ ...getControls })}</>;\n}\n","import React, { PropsWithChildren } from 'react';\nimport { Tree } from './Shared';\nimport { useControls } from './Controls';\n\nexport interface StepProps<T> {\n  name: keyof T;\n}\n\n/**\n * A Step to be used in the Wizard component. Will only be rendered if the name is the active step\n * @param props name of the step and children.\n */\nexport function Step<T extends Tree>({\n  children,\n  name,\n}: PropsWithChildren<StepProps<T>>) {\n  const { step, tree } = useControls<T>();\n\n  // Check if name is bad value\n  React.useEffect(() => {\n    if (!Object.keys(tree).includes(name as string)) {\n      console.warn(\n        `Step component with name ${name} is not found in step tree!`\n      );\n    }\n  }, [name, tree]);\n\n  return <>{step === name && children}</>;\n}\n"],"names":["WizardContext","React","createContext","tree","step","getControls","data","back","reducer","state","action","type","history","active","previous","useControls","useContext","destinations","undefined","newData","children","name","useEffect","Object","keys","includes","console","warn","first","initialData","useReducer","dispatch","allSteps","entries","forEach","key","d","Provider","value","backData","reduce","accum"],"mappings":"mWAgBaA,EAAgBC,EAAMC,cAAuC,CACxEC,KAAM,GACNC,KAAM,GACNC,YAAa,iBAAO,IACpBC,KAAM,GACNC,KAAM,eCER,SAASC,EACPC,EACAC,UAEQA,EAAOC,UACR,uBAEEF,GACHG,SAAUH,EAAMI,eAAWJ,EAAMG,SACjCC,OAAQ,CAAET,KAAMM,EAAON,KAAME,KAAMI,EAAOJ,YAEzC,kBAC4BG,EAAMG,QAA9BE,OAAaF,yBAEfH,GACHI,OAAQ,CACNT,KAAMU,EAASV,KACfE,KAAMI,EAAOJ,MAEfM,QAAAA,mBAGKH,GC7Bb,SAAgBM,UAIkCd,EAAMe,WACpDhB,GAD+BM,IAAAA,KAAMC,IAAAA,WAMhC,CACLH,OAPmBA,KAQnBD,OARyBA,KASzBc,cAAcZ,IATRA,eAUNC,KAAMA,QAAQY,EACdX,KARmB,SAACY,GACpBZ,EAAKY,sCAsBPC,IAAAA,SAEMf,EAAcU,WACbd,gCAAGmB,OAAcf,mCCpCxBe,IAAAA,SACAC,IAAAA,OAEuBN,IAAfX,IAAAA,KAAMD,IAAAA,YAGdF,EAAMqB,WAAU,WACTC,OAAOC,KAAKrB,GAAMsB,SAASJ,IAC9BK,QAAQC,iCACsBN,mCAG/B,CAACA,EAAMlB,IAEHF,gCAAGG,IAASiB,GAAQD,mCF2B3BA,IAAAA,SACAjB,IAAAA,KACAyB,IAAAA,UACAC,cAOI5B,EAAM6B,WACRtB,EACA,CACEK,OAAQ,CACNT,KAAMwB,EACNtB,iBAZQ,cAYaY,GAEvBN,QAAS,YAVTC,OAAUT,IAAAA,KAAME,IAAAA,KAElByB,cAYF9B,EAAMqB,WAAU,WACGC,OAAOC,KAAKrB,GACfsB,SAASG,IACrBF,QAAQC,mBAAmBC,oCAE5B,CAACA,EAAOzB,IACXF,EAAMqB,WAAU,eACRU,EAAWT,OAAOC,KAAKrB,GAC7BoB,OAAOU,QAAQ9B,GAAM+B,SAAQ,gBAAEC,YACvBD,SAAQ,SAAAE,GACPJ,EAASP,SAASW,IACrBV,QAAQC,yCAC8BS,WAAUD,eAAgBC,uCAKrE,CAACjC,IAsBFF,gBAACD,EAAcqC,UACbC,MAAO,CACLnC,KAAAA,EACAC,KAAMA,EACNG,KATO,SAACgC,GACZR,EAAS,CAAEpB,KAAM,YAAaL,KAAMiC,GAAYjC,KAS5CD,YAzBc,kBACIF,EAAKC,GACNoC,QAAuB,SAACC,EAAOrC,qBAO7CqC,aALFrC,GAAO,SAACE,GACPyB,EAAS,CAAEpB,KAAM,WAAYP,KAAAA,EAAME,KAAAA,WAOtC,KAcCA,KAAAA,IAGDc"}