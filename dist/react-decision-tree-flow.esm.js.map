{"version":3,"file":"react-decision-tree-flow.esm.js","sources":["../src/Shared.tsx","../src/Wizard.tsx","../src/Controls.tsx","../src/Step.tsx"],"sourcesContent":["import React from 'react';\r\n\r\nexport interface Tree {\r\n  readonly [step: string]: readonly string[];\r\n}\r\n\r\nexport type ControlType<T extends Tree> = Record<keyof T, () => void>;\r\n\r\nexport interface WizardContextProps<T extends Tree, D extends any = any> {\r\n  tree: T;\r\n  step: string;\r\n  setStep: React.Dispatch<React.SetStateAction<keyof T>>;\r\n  getControls: () => ControlType<T>;\r\n  data: D | null;\r\n  setData: React.Dispatch<React.SetStateAction<D>>;\r\n}\r\n\r\nexport const WizardContext = React.createContext<WizardContextProps<any>>({\r\n  tree: {},\r\n  step: '',\r\n  setStep: () => {},\r\n  getControls: () => ({}),\r\n  data: {},\r\n  setData: () => {},\r\n});\r\n","import React, { PropsWithChildren, ReactElement } from 'react';\r\nimport { Tree, ControlType, WizardContext } from './Shared';\r\n\r\nexport interface WizardProps<T extends Tree, D extends any = any> {\r\n  tree: T;\r\n  first: keyof T;\r\n  initialData?: D | null;\r\n}\r\n\r\n/**\r\n * Declarative Wizard component for React.\r\n * @param props Takes in a tree, the first step of the wizard, and children.\r\n */\r\nexport function Wizard<T extends Tree, D = any>({\r\n  children,\r\n  tree,\r\n  first,\r\n  initialData = null,\r\n}: PropsWithChildren<WizardProps<T, D>>): ReactElement {\r\n  // Check tree for bad values\r\n  React.useEffect(() => {\r\n    const allSteps = Object.keys(tree);\r\n    if (!allSteps.includes(first as string)) {\r\n      console.warn(`First step ${first} is now found in tree as key`);\r\n    }\r\n  }, [first, tree]);\r\n  React.useEffect(() => {\r\n    const allSteps = Object.keys(tree);\r\n    Object.entries(tree).forEach(([key, dests]) => {\r\n      dests.forEach(d => {\r\n        if (!allSteps.includes(d)) {\r\n          console.warn(\r\n            `Tree definition includes path to ${d} from ${key}. However ${d} is not in tree as a key.`\r\n          );\r\n        }\r\n      });\r\n    });\r\n  }, [tree]);\r\n\r\n  const [step, setStep] = React.useState<keyof T>(first);\r\n  const [data, setData] = React.useState<D | null>(initialData);\r\n  const getControls = () => {\r\n    const possibleSteps = tree[step];\r\n    return possibleSteps.reduce<ControlType<T>>((accum, step) => {\r\n      const next = {\r\n        [step]: (data?: D) => {\r\n          setStep(step);\r\n          if (data) {\r\n            setData(data);\r\n          }\r\n        },\r\n      };\r\n      return {\r\n        ...accum,\r\n        ...next,\r\n      };\r\n    }, {} as ControlType<T>);\r\n  };\r\n  return (\r\n    <WizardContext.Provider\r\n      value={{\r\n        tree,\r\n        step: step as string,\r\n        setStep: setStep as React.Dispatch<React.SetStateAction<any>>,\r\n        getControls: getControls as () => Record<string, any>,\r\n        data,\r\n        setData,\r\n      }}\r\n    >\r\n      {children}\r\n    </WizardContext.Provider>\r\n  );\r\n}\r\n","import React, { PropsWithChildren } from 'react';\r\nimport { Tree, WizardContext, WizardContextProps } from './Shared';\r\n\r\nexport interface ControlHook<T extends Tree, D extends any = any> {\r\n  step: keyof T;\r\n  tree: T;\r\n  destinations: Record<keyof T, (data?: D) => void>;\r\n  data?: D;\r\n}\r\n\r\n/**\r\n * A react hook that exposes the current step, possible destinations, passed data, and the tree\r\n * being used. Destinations is an object where the keys are possible destinations and the values are\r\n * functions to move the wizard there.\r\n */\r\nexport function useControls<T extends Tree, D extends any = any>(): ControlHook<\r\n  T,\r\n  D\r\n> {\r\n  const { getControls, step, tree, data } = React.useContext(\r\n    WizardContext as React.Context<WizardContextProps<T, D>>\r\n  );\r\n  return { step, tree, destinations: getControls(), data: data || undefined };\r\n}\r\n\r\nexport interface ControlProps<T extends Tree, D extends any = any> {\r\n  children: (steps: ControlHook<T, D>) => React.ReactNode;\r\n}\r\n\r\n/**\r\n * Controls React Component\r\n * @param ChildrenRenderProp Children is a function that exposes the current step, possible destinations,\r\n * passed data, and the tree being used. Destinations is an object where the keys are possible destinations\r\n * and the values are functions to move the wizard there.\r\n */\r\nexport function Controls<T extends Tree, D extends any = any>({\r\n  children,\r\n}: PropsWithChildren<ControlProps<T>>) {\r\n  const getControls = useControls<T, D>();\r\n  return <>{children({ ...getControls })}</>;\r\n}\r\n","import React, { PropsWithChildren } from 'react';\r\nimport { Tree } from './Shared';\r\nimport { useControls } from './Controls';\r\n\r\nexport interface StepProps<T> {\r\n  name: keyof T;\r\n}\r\n\r\n/**\r\n * A Step to be used in the Wizard component. Will only be rendered if the name is the active step\r\n * @param props name of the step and children.\r\n */\r\nexport function Step<T extends Tree>({\r\n  children,\r\n  name,\r\n}: PropsWithChildren<StepProps<T>>) {\r\n  const { step, tree } = useControls<T>();\r\n\r\n  // Check if name is bad value\r\n  React.useEffect(() => {\r\n    if (!Object.keys(tree).includes(name as string)) {\r\n      console.warn(\r\n        `Step component with name ${name} is not found in step tree!`\r\n      );\r\n    }\r\n  }, [name, tree]);\r\n\r\n  return <>{step === name && children}</>;\r\n}\r\n"],"names":["WizardContext","React","createContext","tree","step","setStep","getControls","data","setData","Wizard","children","first","initialData","useEffect","allSteps","Object","keys","includes","console","warn","entries","forEach","key","dests","d","useState","possibleSteps","reduce","accum","next","Provider","value","useControls","useContext","destinations","undefined","Controls","Step","name"],"mappings":";;;;;;;;;;;;;;;;;;;;IAiBaA,aAAa,gBAAGC,KAAK,CAACC,aAAN,CAA6C;AACxEC,EAAAA,IAAI,EAAE,EADkE;AAExEC,EAAAA,IAAI,EAAE,EAFkE;AAGxEC,EAAAA,OAAO,EAAE,qBAH+D;AAIxEC,EAAAA,WAAW,EAAE;AAAA,WAAO,EAAP;AAAA,GAJ2D;AAKxEC,EAAAA,IAAI,EAAE,EALkE;AAMxEC,EAAAA,OAAO,EAAE;AAN+D,CAA7C;;ACR7B;;;;;AAIA,SAAgBC;MACdC,gBAAAA;MACAP,YAAAA;MACAQ,aAAAA;8BACAC;MAAAA,4CAAc;AAEd;AACAX,EAAAA,KAAK,CAACY,SAAN,CAAgB;AACd,QAAMC,QAAQ,GAAGC,MAAM,CAACC,IAAP,CAAYb,IAAZ,CAAjB;;AACA,QAAI,CAACW,QAAQ,CAACG,QAAT,CAAkBN,KAAlB,CAAL,EAAyC;AACvCO,MAAAA,OAAO,CAACC,IAAR,iBAA2BR,KAA3B;AACD;AACF,GALD,EAKG,CAACA,KAAD,EAAQR,IAAR,CALH;AAMAF,EAAAA,KAAK,CAACY,SAAN,CAAgB;AACd,QAAMC,QAAQ,GAAGC,MAAM,CAACC,IAAP,CAAYb,IAAZ,CAAjB;AACAY,IAAAA,MAAM,CAACK,OAAP,CAAejB,IAAf,EAAqBkB,OAArB,CAA6B;UAAEC;UAAKC;AAClCA,MAAAA,KAAK,CAACF,OAAN,CAAc,UAAAG,CAAC;AACb,YAAI,CAACV,QAAQ,CAACG,QAAT,CAAkBO,CAAlB,CAAL,EAA2B;AACzBN,UAAAA,OAAO,CAACC,IAAR,uCACsCK,CADtC,cACgDF,GADhD,kBACgEE,CADhE;AAGD;AACF,OAND;AAOD,KARD;AASD,GAXD,EAWG,CAACrB,IAAD,CAXH;;wBAawBF,KAAK,CAACwB,QAAN,CAAwBd,KAAxB;MAAjBP;MAAMC;;yBACWJ,KAAK,CAACwB,QAAN,CAAyBb,WAAzB;MAAjBL;MAAMC;;AACb,MAAMF,WAAW,GAAG,SAAdA,WAAc;AAClB,QAAMoB,aAAa,GAAGvB,IAAI,CAACC,IAAD,CAA1B;AACA,WAAOsB,aAAa,CAACC,MAAd,CAAqC,UAACC,KAAD,EAAQxB,IAAR;;;AAC1C,UAAMyB,IAAI,sBACPzB,IADO,IACA,UAACG,IAAD;AACNF,QAAAA,OAAO,CAACD,IAAD,CAAP;;AACA,YAAIG,IAAJ,EAAU;AACRC,UAAAA,OAAO,CAACD,IAAD,CAAP;AACD;AACF,OANO,QAAV;AAQA,0BACKqB,KADL,MAEKC,IAFL;AAID,KAbM,EAaJ,EAbI,CAAP;AAcD,GAhBD;;AAiBA,SACE5B,mBAAA,CAACD,aAAa,CAAC8B,QAAf;AACEC,IAAAA,KAAK,EAAE;AACL5B,MAAAA,IAAI,EAAJA,IADK;AAELC,MAAAA,IAAI,EAAEA,IAFD;AAGLC,MAAAA,OAAO,EAAEA,OAHJ;AAILC,MAAAA,WAAW,EAAEA,WAJR;AAKLC,MAAAA,IAAI,EAAJA,IALK;AAMLC,MAAAA,OAAO,EAAPA;AANK;GADT,EAUGE,QAVH,CADF;AAcD;;AC9DD;;;;;;AAKA,SAAgBsB;0BAI4B/B,KAAK,CAACgC,UAAN,CACxCjC,aADwC;MAAlCM,gCAAAA;MAAaF,yBAAAA;MAAMD,yBAAAA;MAAMI,yBAAAA;;AAGjC,SAAO;AAAEH,IAAAA,IAAI,EAAJA,IAAF;AAAQD,IAAAA,IAAI,EAAJA,IAAR;AAAc+B,IAAAA,YAAY,EAAE5B,WAAW,EAAvC;AAA2CC,IAAAA,IAAI,EAAEA,IAAI,IAAI4B;AAAzD,GAAP;AACD;AAMD;;;;;;;AAMA,SAAgBC;MACd1B,gBAAAA;AAEA,MAAMJ,WAAW,GAAG0B,WAAW,EAA/B;AACA,SAAO/B,mBAAA,eAAA,MAAA,EAAGS,QAAQ,cAAMJ,WAAN,EAAX,CAAP;AACD;;AChCD;;;;;AAIA,SAAgB+B;MACd3B,gBAAAA;MACA4B,YAAAA;;qBAEuBN,WAAW;MAA1B5B,oBAAAA;MAAMD,oBAAAA;;;AAGdF,EAAAA,KAAK,CAACY,SAAN,CAAgB;AACd,QAAI,CAACE,MAAM,CAACC,IAAP,CAAYb,IAAZ,EAAkBc,QAAlB,CAA2BqB,IAA3B,CAAL,EAAiD;AAC/CpB,MAAAA,OAAO,CAACC,IAAR,+BAC8BmB,IAD9B;AAGD;AACF,GAND,EAMG,CAACA,IAAD,EAAOnC,IAAP,CANH;AAQA,SAAOF,mBAAA,eAAA,MAAA,EAAGG,IAAI,KAAKkC,IAAT,IAAiB5B,QAApB,CAAP;AACD;;;;"}