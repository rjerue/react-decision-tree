{"version":3,"file":"react-decision-tree-flow.esm.js","sources":["../src/Shared.tsx","../src/Wizard.tsx","../src/Controls.tsx","../src/Step.tsx"],"sourcesContent":["import React from 'react';\n\nexport interface Tree {\n  readonly [step: string]: readonly string[];\n}\n\nexport type ControlType<T extends Tree> = Record<keyof T, () => void>;\n\nexport interface WizardContextProps<T extends Tree, D extends any = any> {\n  tree: T;\n  step: string;\n  getControls: () => ControlType<T>;\n  data: D | null;\n  back: (data?: D) => void;\n}\n\nexport const WizardContext = React.createContext<WizardContextProps<any>>({\n  tree: {},\n  step: '',\n  getControls: () => ({}),\n  data: {},\n  back: () => {},\n});\n","import React from 'react';\nimport { Tree, ControlType, WizardContext } from './Shared';\n\nexport interface WizardProps<T extends Tree, D extends any = any> {\n  tree: T;\n  first: keyof T;\n  initialData?: D | null;\n}\n\ninterface WizardState<T extends Tree, D extends any = any> {\n  step: keyof T;\n  data?: D;\n}\n\ninterface ReducerState<T extends Tree, D extends any = any> {\n  active: WizardState<T, D>;\n  history: WizardState<T, D>[];\n}\n\ntype ReducerAction<T extends Tree, D extends any = any> =\n  | { type: 'SET_STEP'; data?: D; step: keyof T }\n  | { type: 'STEP_BACK'; data?: D };\n\nfunction reducer<T extends Tree, D extends any = any>(\n  state: ReducerState<T, D>,\n  action: ReducerAction<T, D>\n): ReducerState<T, D> {\n  switch (action.type) {\n    case 'SET_STEP':\n      return {\n        ...state,\n        history: [state.active, ...state.history],\n        active: { step: action.step, data: action.data },\n      };\n    case 'STEP_BACK':\n      const [previous, ...history] = state.history;\n      return {\n        ...state,\n        active: {\n          step: previous.step,\n          data: action.data,\n        },\n        history,\n      };\n    default:\n      return state;\n  }\n}\n\n/**\n * Declarative Wizard component for React.\n * @param props Takes in a tree, the first step of the wizard, and children.\n */\nexport function Wizard<T extends Tree, D = any>({\n  children,\n  tree,\n  first,\n  initialData = null,\n}: React.PropsWithChildren<WizardProps<T, D>>): React.ReactElement {\n  const [\n    {\n      active: { step, data },\n    },\n    dispatch,\n  ] = React.useReducer<React.Reducer<ReducerState<T, D>, ReducerAction<T, D>>>(\n    reducer,\n    {\n      active: {\n        step: first,\n        data: initialData || undefined,\n      },\n      history: [],\n    }\n  );\n\n  React.useEffect(() => {\n    const allSteps = Object.keys(tree);\n    if (!allSteps.includes(first as string)) {\n      console.warn(`First step ${first} is now found in tree as key`);\n    }\n  }, [first, tree]);\n  React.useEffect(() => {\n    const allSteps = Object.keys(tree);\n    Object.entries(tree).forEach(([key, dests]) => {\n      dests.forEach(d => {\n        if (!allSteps.includes(d)) {\n          console.warn(\n            `Tree definition includes path to ${d} from ${key}. However ${d} is not in tree as a key.`\n          );\n        }\n      });\n    });\n  }, [tree]);\n\n  const getControls = () => {\n    const possibleSteps = tree[step];\n    return possibleSteps.reduce<ControlType<T>>((accum, step) => {\n      const next = {\n        [step]: (data?: D) => {\n          dispatch({ type: 'SET_STEP', step, data });\n        },\n      };\n      return {\n        ...accum,\n        ...next,\n      };\n    }, {} as ControlType<T>);\n  };\n\n  const back = (backData?: D) => {\n    dispatch({ type: 'STEP_BACK', data: backData || data });\n  };\n\n  return (\n    <WizardContext.Provider\n      value={{\n        tree,\n        step: step as string,\n        back,\n        getControls: getControls as () => Record<string, any>,\n        data,\n      }}\n    >\n      {children}\n    </WizardContext.Provider>\n  );\n}\n","import React, { PropsWithChildren } from 'react';\nimport { Tree, WizardContext, WizardContextProps } from './Shared';\n\nexport interface ControlHook<T extends Tree, D extends any = any> {\n  step: keyof T;\n  tree: T;\n  destinations: Record<keyof T, (data?: D) => void>;\n  back: (currentData?: D) => void;\n  data?: D;\n}\n\n/**\n * A react hook that exposes the current step, possible destinations, passed data, and the tree\n * being used. Destinations is an object where the keys are possible destinations and the values are\n * functions to move the wizard there.\n */\nexport function useControls<T extends Tree, D extends any = any>(): ControlHook<\n  T,\n  D\n> {\n  const { getControls, step, tree, data, back } = React.useContext(\n    WizardContext as React.Context<WizardContextProps<T, D>>\n  );\n  const backFunction = (newData?: D) => {\n    back(newData);\n  };\n  return {\n    step,\n    tree,\n    destinations: getControls(),\n    data: data || undefined,\n    back: backFunction,\n  };\n}\n\nexport interface ControlProps<T extends Tree, D extends any = any> {\n  children: (steps: ControlHook<T, D>) => React.ReactNode;\n}\n\n/**\n * Controls React Component\n * @param ChildrenRenderProp Children is a function that exposes the current step, possible destinations,\n * passed data, and the tree being used. Destinations is an object where the keys are possible destinations\n * and the values are functions to move the wizard there.\n */\nexport function Controls<T extends Tree, D extends any = any>({\n  children,\n}: PropsWithChildren<ControlProps<T>>) {\n  const getControls = useControls<T, D>();\n  return <>{children({ ...getControls })}</>;\n}\n","import React, { PropsWithChildren } from 'react';\nimport { Tree } from './Shared';\nimport { useControls } from './Controls';\n\nexport interface StepProps<T> {\n  name: keyof T;\n}\n\n/**\n * A Step to be used in the Wizard component. Will only be rendered if the name is the active step\n * @param props name of the step and children.\n */\nexport function Step<T extends Tree>({\n  children,\n  name,\n}: PropsWithChildren<StepProps<T>>) {\n  const { step, tree } = useControls<T>();\n\n  // Check if name is bad value\n  React.useEffect(() => {\n    if (!Object.keys(tree).includes(name as string)) {\n      console.warn(\n        `Step component with name ${name} is not found in step tree!`\n      );\n    }\n  }, [name, tree]);\n\n  return <>{step === name && children}</>;\n}\n"],"names":["WizardContext","React","createContext","tree","step","getControls","data","back","reducer","state","action","type","history","active","previous","Wizard","children","first","initialData","useReducer","undefined","dispatch","useEffect","allSteps","Object","keys","includes","console","warn","entries","forEach","key","dests","d","possibleSteps","reduce","accum","next","backData","Provider","value","useControls","useContext","backFunction","newData","destinations","Controls","Step","name"],"mappings":"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"}